Папка містить теми проектів для ООП реалізації на С# 

Студенти вибирають теми за власним бажанням. 
Неприпустимо записуватися на одну дему більше ніж одному студенту.

Проект передбачає 6 версій (етапів), кожна з яких оцінюєтся у 4 бали.
За готовий проект, тобто за 6 версій, можна отримати 24 бали.

Порядок виконання проекту передбачає такі версії програм (етапи або releases):

================================================================================  
Версія 1. 
"Об'єктно-орієнована декомпозиція предметної області завдання"  4 бали          
	a) Однайомлення з предметною областю та постановкою задачі.
	b) Аналіз рекомендованих джерел інформації
	c) Пошук та аналіз додаткових джерел інформації за потребою
	d) Розробка сценарію роботи програми
	d) Об'єктно-орієнована декомпозиція предметної області завдання (ідентифікаця об'єктів та їх взаємозв'язків)
	e) Розробка діаграми класів та їх взаємозв'язків. Мають бути враховані такі типи взаємозв'язків:
		-асоціації
		-агрегації
		-композиції
     Для першої версії зв'язок типу "успадкування" не використовувати 
	f) Генерація коду класів по розробленій діаграмі або написання коду класів. Для кожного класу створити окремий файл
	g) Сторення класу Program та функції Main(). Код функції Main() потрібний, як точка входу в програму, для компіляції програми та реалізації сценарію роботи програми.
	Сам сценарію реалізувати методами-заглушками (пустими функціями, які виводть на консоль повідолення про дії, що відбуватимуться в подальших версіях) 
	h) Зборка програми, компіляція, запуск на виконання.
	i) Результат роботи програми: 
		ПІБ студента, курс, група
		варіант завдання
		версія 1
		Старт імітації
		Фініш імітації 
============================================================================================		
Версія 2."Конструктори класів" 4 бали
1. Скопіювати проект програми версії 1. Перейменувати його у версію 2. 
2. Додати в кожний файл класу код, що реалізує конструктори класів.

Відповідно до C# документації 
https://docs.microsoft.com/ru-ru/dotnet/csharp/programming-guide/classes-and-structs/constructors
1. розробити для кожного класу такі типи конструкторів:
	a) Конструктори без параметрів
	b) Конструктори з параметрами (конструктори ініціалізації полів класу)
	с) Статичні конструктори
	d) Закриті конструктори
	e) Конструктори копій
	f) Конструктори, що викликають інші конструктори
2. В конструкторах класів врахувати взаємозв'язки класів:
	a) асоціації
	b) агрегації
	c) композиції
3. У функцію Main() додати код, що створює об'єкти класів. Врахувати взаємозв'язки класів
4. Вивести на екран протокол роботи конструкторів
===========================================================================================

Версія 3."Реалізація аксесорів та предикатних функцій" 4 бали
1. Скопіювати проект програми версії 2. Перейменувати його у версію 3. 
2. Додати в кожний файл класу код, що реалізує аксесори(властивості get/set) та предикатні функції 
(які повертають значення true/false і служать для визначення стану об'єкта).
Передбачити такі  різновиди методів доступу (аксесорів)

https://docs.microsoft.com/ru-ru/dotnet/csharp/programming-guide/classes-and-structs/using-properties
	a) властивості, що автоматично реалізуютьсях
	b) закриті та відкриті властивості
	c) властивості читання та запису
	

===========================================================================================
Версія 4."Перевантаження операторів - Реалізація операторних методів (operator)" 4 бали

1. Скопіювати проект програми версії 3. Перейменувати його у версію 4. 
2. Додати в класи код, що реалізує перевантаження операторів:
https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/operators/operator-overloading
https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/language-specification/expressions#operator-overloading

 	a) бінарні (арифметичні) оператори + - * /
	b) унарні(арифметичні) оператори + - ++,--, !, true, false
	c) оператори порівняння ==. !=, <,>, <=, >=
	d) складені оператори присвоєння +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=, які перевантажуться
	   через перевантаження відповідних бінарних операторів    

====================================================================================
Версія 5."Реалізація успадкування класів". 4 бали
1. Скопіювати проект програми версії 4. Перейменувати його у версію 5.
2. Модернізувати діяграму класів, додавши додаткові базові або похідні класи. 
3. Додати в класи код, що реалізує успадкування класів відповідно до діаграми класів. 
4. Модернізувати конструктори класів, врахувавши конструктори базоввих класів під час розробки уонструкторів похідних класів

https://docs.microsoft.com/ru-ru/dotnet/csharp/programming-guide/classes-and-structs/inheritance
====================================================================================

Версія 6."Реалізація обробників виключних ситуацій". 4 бали
1. Скопіювати проект програми версії 5. Перейменувати його у версію 6
2. Проаналізувати опис предметної області та виявити критичні (ризикові) ситуації, які можуть привести до
   негативних наслідків 
3. Реалізувати обробку виняткових (критичних) ситуацій засобами обробки виключень C# 
https://docs.microsoft.com/ru-ru/dotnet/csharp/language-reference/keywords/try-catch-finally

4.В якості виняткових ситуацій розглянути ситуації, які обробляються винятками стандартних класів C#, враховувати;
 	- некоректність введення даних,
	- вихід за межі масиву, 
	- неможливість відкрити файл
	- ділення на нуль тощо 
5. Створити користувацькі класи винятків. В якості методів користувацьких класів винятків, враховувати винятки 
згідно зі сценарієм роботи програми за варіантами
	 
